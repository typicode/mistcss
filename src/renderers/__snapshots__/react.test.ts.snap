// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`render > renders Hono component (full) 1`] = `
"// Generated by MistCSS, do not modify
import './component.mist.css'

import type { PropsWithChildren } from 'hono/jsx'

interface Props extends JSX.IntrinsicElements['div'] { attr?: 'a' | 'b', attrFooBar?: 'foo-bar', isFoo?: boolean, propFoo?: string, propBar?: string }

export function Foo({ children, attr, attrFooBar, isFoo, propFoo, propBar, ...props }: PropsWithChildren<Props>) {
  return (<div {...props} data-attr={attr} data-attr-foo-bar={attrFooBar} data-is-foo={isFoo} style={{ '--prop-foo': propFoo, '--prop-bar': propBar }} class="foo" >\${children}</div>)
}
"
`;

exports[`render > renders React component (full) 1`] = `
"// Generated by MistCSS, do not modify
import './component.mist.css'

import type { JSX, PropsWithChildren } from 'react'

interface Props extends JSX.IntrinsicElements['div'] { attr?: 'a' | 'b', attrFooBar?: 'foo-bar', isFoo?: boolean, propFoo?: string, propBar?: string }

export function Foo({ children, attr, attrFooBar, isFoo, propFoo, propBar, ...props }: PropsWithChildren<Props>) {
  return (<div {...props} data-attr={attr} data-attr-foo-bar={attrFooBar} data-is-foo={isFoo} style={{ '--prop-foo': propFoo, '--prop-bar': propBar }} className="foo" >\${children}</div>)
}
"
`;

exports[`render > renders React component (minimal) 1`] = `
"// Generated by MistCSS, do not modify
import './component.mist.css'

import type { JSX, PropsWithChildren } from 'react'

interface Props extends JSX.IntrinsicElements['div'] {  }

export function Foo({ children, ...props }: PropsWithChildren<Props>) {
  return (<div {...props} className="foo" >\${children}</div>)
}
"
`;

exports[`render > renders React component (void element) 1`] = `
"// Generated by MistCSS, do not modify
import './component.mist.css'

import type { JSX } from 'react'

interface Props extends JSX.IntrinsicElements['hr'] {  }

export function Foo({ ...props }: Props) {
  return (<hr {...props} className="foo" />)
}
"
`;
