import assert from 'node:assert/strict'
import test from 'node:test'

import { Data } from '../parser.js'
import { render } from './react.js'

void test('render', () => {
  const data: Data = {
    tag: 'div',
    className: 'foo',
    attributes: {
      'data-attr': new Set(['a', 'b']),
      'data-attr-foo-bar': new Set(['foo-bar']),
    },
    booleanAttributes: new Set(['data-is-foo']),
    properties: new Set(['--prop-foo', '--prop-bar']),
  }

  const actual = render('component', data)
  assert.equal(
    actual,
    `// Generated by MistCSS, do not modify
import './component.mist.css'

import type { JSX, PropsWithChildren } from 'react'

interface Props {
  attr?: 'a' | 'b'
  attrFooBar?: 'foo-bar'
  isFoo?: boolean
  propFoo?: string
  propBar?: string
}

export function Foo({ children, attr, attrFooBar, isFoo, propFoo, propBar, ...props }: PropsWithChildren<Props> extends JSX.IntrinsicElements['div']) {
  return (
    <div
      {...props}
      data-attr={attr}
      data-attr-foo-bar={attrFooBar}
      data-is-foo={isFoo}
      style={{ '--prop-foo': propFoo, '--prop-bar': propBar }}
      className="foo"
    >
      {children}
    </div>
  )
}
`,
  )
})

void test('render childless', () => {
  const data: Data = {
    tag: 'hr',
    className: 'foo',
    attributes: {
      'data-attr': new Set(['a', 'b']),
      'data-attr-foo-bar': new Set(['foo-bar']),
    },
    booleanAttributes: new Set(['data-is-foo']),
    properties: new Set(['--prop-foo', '--prop-bar']),
  }

  const actual = render('component', data)
  assert.equal(
    actual,
    `// Generated by MistCSS, do not modify
import './component.mist.css'

import type { JSX } from 'react'

interface Props {
  attr?: 'a' | 'b'
  attrFooBar?: 'foo-bar'
  isFoo?: boolean
  propFoo?: string
  propBar?: string
}

export function Foo({ attr, attrFooBar, isFoo, propFoo, propBar, ...props }: Props extends JSX.IntrinsicElements['hr']) {
  return (
    <hr
      {...props}
      data-attr={attr}
      data-attr-foo-bar={attrFooBar}
      data-is-foo={isFoo}
      style={{ '--prop-foo': propFoo, '--prop-bar': propBar }}
      className="foo"
    />
  )
}
`,
  )
})
