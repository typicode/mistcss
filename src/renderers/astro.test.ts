import assert from 'node:assert/strict'
import test from 'node:test'

import { Data } from '../parser.js'
import { render } from './astro.js'

void test('render', () => {
  const data: Data = {
    tag: 'div',
    className: 'foo',
    attributes: {
      'data-attr': new Set(['a', 'b']),
      'data-attr-foo-bar': new Set(['foo-bar']),
    },
    booleanAttributes: new Set(['data-is-foo']),
    properties: new Set(['--prop-foo', '--prop-bar']),
  }

  const actual = render('component', data)
  assert.equal(
    actual,
    `---
// Generated by MistCSS, do not modify
import './component.mist.css'

interface Props {
  attr?: 'a' | 'b'
  attrFooBar?: 'foo-bar'
  isFoo?: boolean
  propFoo?: string
  propBar?: string
}

const { attr, attrFooBar, isFoo, propFoo, propBar, ...rest } = Astro.props
---

<div
  {...rest}
  data-attr={attr}
  data-attr-foo-bar={attrFooBar}
  data-is-foo={isFoo}
  style={{ '--prop-foo': propFoo, '--prop-bar': propBar }}
  class="foo"
>
  <slot />
</div>
`,
  )
})


void test('render', () => {
  const data: Data = {
    tag: 'hr',
    className: 'foo',
    attributes: {},
    booleanAttributes: new Set(),
    properties: new Set()
  }

  const actual = render('component', data)
  assert.equal(
    actual,
    `---
// Generated by MistCSS, do not modify
import './component.mist.css'

interface Props {

}

const { ...rest } = Astro.props
---

<hr
  {...rest}

  style={{  }}
  class="foo"
/>
`,
  )
})

