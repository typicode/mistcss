import {
  attributeToCamelCase,
  pascalCase,
  propertyToCamelCase,
} from '../case.js'
import { Data } from '../parser.js'
import { hasChildren, renderPropsInterface } from './_common.js'

function renderTagAttributes(data: Data, indent: string): string {
  return [
    ...Object.keys(data.attributes).map(
      (attribute) => `${attribute}={${attributeToCamelCase(attribute)}}`,
    ),
    ...Array.from(data.booleanAttributes).map(
      (attribute) => `${attribute}={${attributeToCamelCase(attribute)}}`,
    ),
  ]
    .map((l) => indent + l)
    .join('\n')
}

function renderTagStyle(data: Data, indent: string): string {
  const foo = Array.from(data.properties)
    .map((property) => `'${property}': ${propertyToCamelCase(property)}`)
    .join(', ')

  return indent + `style={{ ${foo} }}`
}

function renderFunctionArgs(data: Data): string {
  return [
    ...hasChildren(data.tag) ? ['children'] : [],
    ...Object.keys(data.attributes).map(attributeToCamelCase),
    ...Array.from(data.booleanAttributes).map(attributeToCamelCase),
    ...Array.from(data.properties).map(propertyToCamelCase),
    '...props',
  ].join(', ')
}

function renderFunction(
  data: Data,
  isHono: boolean,
): string {
  return `export function ${pascalCase(data.className)}({ ${renderFunctionArgs(data)} }: ${hasChildren(data.tag) ? `PropsWithChildren<Props>` : `Props`} extends JSX.IntrinsicElements['${data.tag}']) {
  return (
    <${data.tag}
      {...props}
${renderTagAttributes(data, '      ')}
${renderTagStyle(data, '      ')}
      ${isHono ? 'class' : 'className'}="${data.className}"
    ${
      hasChildren(data.tag)
        ? `>
      {children}
    </${data.tag}`
        : `/`
    }>
  )
}`
}

function renderImports(data: Data, isHono: boolean): string {
  if (hasChildren(data.tag)) {
    if (isHono) return "import type { PropsWithChildren } from 'hono/jsx'"
    return "import type { JSX, PropsWithChildren } from 'react'"
  } else {
    if (isHono) return ''
    return "import type { JSX } from 'react'"
  }
}

export function render(name: string, data: Data, isHono = false): string {
  return `// Generated by MistCSS, do not modify
import './${name}.mist.css'

${renderImports(data, isHono)}

${renderPropsInterface(data)}

${renderFunction(data, isHono)}
`
}
